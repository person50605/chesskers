using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Security.Permissions;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Chesskers
{
    internal class Program
    {
        static void Draw(int[,] board, bool letters)
        {
            Console.WriteLine("   a b c d e f g h");
            Console.WriteLine();

            //change these vars to change the board
            string ActiveTiles = "+";
            string IncativeTiles = "`";
            string One = "w";
            string Two = "b";
            string Three = "W";
            string Four = "B";

            for (int i = 0; i < 8; i++)
            {
                Console.Write(i + 1 + "  ");
                for (int j = 0; j < 8; j++)
                {
                    if (letters)
                    {
                        if (board[i, j] == 1)
                        {
                            Console.Write(One);
                        }
                        else if (board[i, j] == 2)
                        {
                            Console.Write(Two);
                        }
                        else if (board[i, j] == 3)
                        {
                            Console.Write(Three);
                        }
                        else if (board[i, j] == 4)
                        {
                            Console.Write(Four);
                        }
                        else
                        {
                            if (((i % 2) + j) % 2 == 0)
                            { //find active tiles
                              //active tiles
                                Console.Write(ActiveTiles);
                            }
                            else
                            {
                                //inaccessable tiles
                                Console.Write(IncativeTiles);
                            }
                        }
                    }
                    else
                    {
                        Console.Write(board[i, j]);
                    }
                    ;

                    Console.Write(" ");

                }
                ;
                Console.WriteLine();
            }
            ;
            //add an extra space
            Console.WriteLine();
            
        }




        static int[,] Move(string move,int toca, int[,]board)
        {

            string[] cartas = { "a", "b", "c", "d", "e", "f", "g", "h" };

            //moving

            //find the equivalent column of the letters
            string movex = Array.IndexOf(cartas, move[0].ToString()).ToString();
            movex += Array.IndexOf(cartas, move[3].ToString()).ToString();




            int boardone = int.Parse(move[1].ToString()) - 1;
            int boardtwo = int.Parse(movex[0].ToString());
            int boardselect = board[int.Parse(move[1].ToString()) - 1, int.Parse(movex[0].ToString())];
            if (  //Fail conditions
               movex[0].ToString() == "9" //Is the start x pos not on the board?
            || movex[1].ToString() == "9" //Is the end x pos not on the board?
            || boardselect % 2 != toca % 2 //Is the selected space an opponent's piece?
            || boardselect == 0 //Is the selected "piece" empty?
            || (((boardone + 1) % 2) + boardtwo) % 2 == 0 //Is the tile inactive?
            || int.Parse(move[1].ToString()) < 1 //Is the start pos y not on the board?
            || int.Parse(move[1].ToString()) > 8 //Is the start pos y not on the board?
            || int.Parse(move[4].ToString())-1 < 1 //Is the end pos y not on the board?
            || int.Parse(move[4].ToString())-1 > 8 //Is the end pos y not on the board?
            || movex.ToString().Contains("-") //Does either movement x not exist?

            )
            {

                Console.WriteLine("Invalid Move, try again.");
                return board;

            }
            else
            {
                int startx = int.Parse(movex[0].ToString());
                int starty = int.Parse(move[1].ToString())-1;
                int targetx = int.Parse(movex[1].ToString());
                int targety = int.Parse(move[4].ToString())-1;
                if (toca % 2 + 1 == 1)
                { //Is it black?
                    if (starty < targety)
                    {  //is it moving up (backwards)
                        if (boardselect == 4)
                        {
                            if (startx < targetx)
                            { //is it moving left

                            }
                            else
                            { //it's moving right

                            }
                        }
                        else
                        {
                            Console.WriteLine("Invalid Move, try again");
                            return board;
                        }
                    }



                } else { //It's white
                    if (starty > targety)
                    {  //is it moving up (forwards)

                        if (board[targety, targetx] == 0)
                            {
                                
                                board[targety, targetx] = 1;
                                board[starty, startx] = 0;
                            }
                            else 
                            {
                                //jump
                                if (targetx < startx)
                                { //is it moving left?
                                    if (targetx < 1 || targety < 1) {
                                        Console.WriteLine("Invalid Move, try again");
                                        return board;
                                    } else if (board[targety - 1, targetx - 1] == 0)
                                    { // Jump
                                    board[starty, startx] = 0;
                                    board[targety, targetx] = 0;
                                        board[targety - 1, targetx - 1] = 1;
                                    }

                                }
                                else { //it's moving right
                                    if (targetx > 6 || targety < 1)
                                    {
                                        Console.WriteLine("Invalid Move, try again");
                                        return board;
                                    }
                                    else if (board[targety - 1, targetx + 1] == 0)
                                    { // Jump
                                    board[starty, startx] = 0;
                                    board[targety, targetx] = 0;
                                        board[targety - 1, targetx + 1] = 1;
                                    }
                                }
                            }
                    }  else if (boardselect == 3)
                    { //is it a king?


                    }
                    else
                    {
                        Console.WriteLine("Invalid Move, try again");
                        return board;
                    }

                }


            }
            toca++;
            return board;
           
        }
        public static void Main(string[] args)
        {
            int[,] board = {
            {2,0,2,0,2,0,2,0},
            {0,2,0,2,0,2,0,2},
            {2,0,2,0,2,0,2,0},
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            {0,1,0,1,0,1,0,1},
            {1,0,1,0,1,0,1,0},
            {0,1,0,1,0,1,0,1}
          };

            int toca = 1;
            Console.WriteLine("Play agianst bot? (y/n)");
            string contesta = Console.ReadLine();
            //Console.WriteLine(contesta);

            //do they want to play against the bot?

            if (contesta == "y" || contesta == "yes")
            {
                bool bot = true;
            } else {
                bool bot = false;

            }

            //while(true){

            Draw(board, true);
            Console.WriteLine("Your move (L#-L#)");

            //Thread.Sleep(1000);
            //string move = "b6-c5"; 
            string move = Console.ReadLine();

            board = Move(move, toca, board);


                Console.WriteLine(move);
            //}



            Draw(board, true);

        }



    }
}
